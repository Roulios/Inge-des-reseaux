
import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
import Utils
import Entity
from collections import defaultdict
import numpy as np

def moving_average(data, window_size=5):
    return np.convolve(data, np.ones(window_size)/window_size, mode='valid')

def show_latency_gaph(d_lat_hist):
    for mabtype,values in d_lat_hist.items():
        for user,lat in values.items():
            plt.title(f"latence = f(t) pour {mabtype}")
            plt.plot(lat[0],lat[1],'x--',label=user)
            for i in range(len(lat[0])):
                if lat[2][i].name=="V2V":
                    plt.plot(lat[0][i],lat[1][i],'o')
        plt.xlabel("temps")
        plt.ylabel("latence")
        plt.ylim(bottom=0)
        plt.legend()
        plt.show()
    
def show_graph(users:[Entity.User]):
    """plot a few stats"""
    users_by_algo = {}
    for user in users:
        if user.mab.__class__.__name__ not in users_by_algo:
            users_by_algo[user.mab.__class__.__name__] = []
        users_by_algo[user.mab.__class__.__name__].append(user)
    
    color_cycle = plt.rcParams['axes.prop_cycle'].by_key()['color']
    algo_colors = {algo: color_cycle[i % len(color_cycle)] for i, algo in enumerate(users_by_algo)}

    mab_marker = {
        'V2V': 'x',
        'V2I': 'o',
    }
    metrics = ["latency", "received_percentage", "jitter"]
    for metric in metrics:
        fig, axs = plt.subplots(nrows=2, ncols=3, figsize=(9, 6), squeeze=False)
        fig.suptitle(f"{metric}", fontsize=14)
        fig.subplots_adjust(hspace=0.4, wspace=0.3)

        for idx, (algo_name, user_list) in enumerate(users_by_algo.items()):
            row, col = divmod(idx, 3)
            ax = axs[row][col]

            ax.set_title(f"{metric} = f(timestamp) pour \nl'algorithme {algo_name}", fontsize=10)
            ax.set_xlabel("timestamp")
            ax.set_ylabel(metric)
            ax.grid(True)
            ax.set_ylim(bottom=0)
            match (metric):
                case ("latency"):
                    ax.set_ylim(top=15)
                case ("received_percentage"):
                    ax.set_ylim(top=100)
                case("jitter"):
                    ax.set_ylim(top=0.8)
            color = algo_colors[algo_name]

            # Tracé des courbes utilisateurs
            for user in user_list:
                history = user.metrics.get_history()
                timestamps = history["timestamp"]
                values = history[metric]
                mab_types = list(map(lambda x: x.name, history["mab_type"]))

                start_idx = 0
                for i in range(1, len(timestamps) + 1):
                    if i == len(timestamps) or mab_types[i] != mab_types[i - 1]:
                        segment_ts = timestamps[start_idx:i]
                        segment_val = values[start_idx:i]
                        marker = mab_marker[mab_types[start_idx]]
                        ax.plot(segment_ts, segment_val, linestyle='-', marker=marker, color=color, label=None)
                        start_idx = i
            
            # Calcul moyenne temporelle avec regroupement par timestamp
            valeurs_par_timestamp = defaultdict(list)
            for user in user_list:
                history = user.metrics.get_history()
                timestamps = history["timestamp"]
                values = history[metric]
                for t, v in zip(timestamps, values):
                    valeurs_par_timestamp[t].append(v)

            timestamps_tries = sorted(valeurs_par_timestamp.keys())
            moyennes = [sum(valeurs_par_timestamp[t]) / len(valeurs_par_timestamp[t]) for t in timestamps_tries]

            # Tracer moyenne simple en noir tireté
            ax.plot(timestamps_tries, moyennes, color='black', linestyle='--', label='Moyenne')

            # Tracer moyenne lissée en rouge continue
            window_size = 20
            if len(moyennes) >= window_size:
                moyennes_lissees = moving_average(moyennes, window_size)
                timestamps_lisses = timestamps_tries[window_size - 1:]
                ax.plot(timestamps_lisses, moyennes_lissees, color='red', linestyle='-', label='Moyenne lissée')

            ax.legend(fontsize=8)

    plt.show()
